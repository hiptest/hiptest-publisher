---
en:
  actionwords_diff:
    exporting_diff_title: Exporting actionwords diff
    exporting_title: Exporting actionword signature
    loading_previous_definition: Loading previous definition
    summary:
      created:
        one: |
          One action word created,
          run '%{command_line} --show-actionwords-created' to get the definition
          %{list}
        other: |
          %{count} action words created,
          run '%{command_line} --show-actionwords-created' to get the definitions
          %{list}
      definition_changed:
        one: |
          One action word which definition changed,
          run '%{command_line} --show-actionwords-definition-changed' to get the new definition
          %{list}
        other: |
          %{count} action words which definition changed,
          run '%{command_line} --show-actionwords-definition-changed' to get the new definitions
          %{list}
      deleted:
        one: |
          One action word deleted,
          run '%{command_line} --show-actionwords-deleted' to list the name in the code
          %{list}
        other: |
          %{count} action words deleted,
          run '%{command_line} --show-actionwords-deleted' to list the names in the code
          %{list}
      empty: No action words changed
      renamed:
        one: |
          One action word renamed,
          run '%{command_line} --show-actionwords-renamed' to get the new name
          %{list}
        other: |
          %{count} action words renamed,
          run '%{command_line} --show-actionwords-renamed' to get the new names
          %{list}
      signature_changed:
        one: |
          One action word which signature changed,
          run '%{command_line} --show-actionwords-signature-changed' to get the new signature
          %{list}
        other: |
          %{count} action words which signature changed,
          run '%{command_line} --show-actionwords-signature-changed' to get the new signatures
          %{list}
  analyzing_data: Analyzing data
  build_data:
    error: |
      Unable to build:
      %{node}
    title: Extracting data
  check_version:
    error: Unable to connect to Rubygem
    outdated: |
      Your current install of hiptest-publisher (%{current}) is outdated, version %{latest} is available
      run 'gem install hiptest-publisher' to get the latest version."
    title: Checking latest version on Rubygem
    up_to_date: Your current install of hiptest-publisher (%{current}) is up-to-date.
  default: default
  errors:
    api_error: HipTest API returned error %{code}
    cli_options:
      actionwords_signature_directory: 'Bad Action Words signature file: the file "%{path}" is a directory'
      filter_status_without_test_run: |
        You need to specify a test run when filtering on test status.
        Use options test_run_id or test_run_name.
      filter_with_test_run: Filtering can not be applied when exporting from a test run
      invalid_category:
        one: 'Error with --only: the category %{invalid_categories} does not exist for language %{language}. Available categories are %{available_categories}.'
        other: 'Error with --only: the categories %{invalid_categories} do not exist for language %{language}. Available categories are %{available_categories}.'
      invalid_execution_environment: 'Error with --execution-environment: the name of the execution environment must be less than 255 characters'
      invalid_meta: |
        meta should be a list of comma separated key:value items (eg. OS:Linux,CI:Jenkins)

        Found: %{incorrect_value}
      invalid_numeric_value_list: |
        %{option} should be a list of comma separated numeric values

        Found: %{incorrect_value}
      invalid_tag_value_list: |
        %{option} should be a list of comma separated tags in HipTest

        Found: %{incorrect_value}
      invalid_test_run_id: 'Invalid format --test-run-id="%{test_run_id}": the test run id must be numeric'
      invalid_token: 'Invalid format --token="%{token}": the project secret token must be numeric'
      irregular_report_file: 'Error with --push: the file "%{path}" is not a regular file'
      irregular_xml_file: 'Error with --xml-file: the file "%{path}" is not a regular file'
      missing_actionwords_signature_file: |
        Missing Action Words signature file: the file "actionwords_signature.yaml" could not be found in directory "%{directory_path}"
        Use --actionwords-signature to generate the file "%{directory_path}/actionwords_signature.yaml"
      missing_config_file: 'Error with --config: the file "%{config_file}" does not exist or is not readable'
      missing_token: |
        Missing argument --token: you must specify project secret token with --token=<project-token>

        The project secret token can be found on HipTest in the settings section, under
        'Test code generation'. It is a sequence of numbers uniquely identifying your
        project.

        Note that settings section is available only to administrators of the project.
      multiple_filters: |
        You specified multiple filters for the export.

        Only one filter can be applied.
      output_directory_not_directory: 'Error with --output-directory: the file "%{output_dir}" is not a directory'
      output_directory_not_writable: 'Error with --output-directory: the directory "%{output_dir}" is not writable'
      output_directory_parent_not_writable: 'Error with --output-directory: the directory "%{output_dir}" can not be created because "%{realpath}" is not writable'
      unreadable_report_file: 'Error with --push: the file "%{path}" does not exist or is not readable'
      unreadable_xml_file: 'Error with --xml-file: the file "%{path}" does not exist or is not readable'
    default: |
      An error has occured, sorry for the inconvenience.
      Try running the command again with --verbose for detailed output
    export_cache:
      cache_dir_not_creatable: Unable to create directory %{cache_dir}
    invalid_config_file: cannot find configuration file in "%{hiptest_publisher_path}/lib/config" for language %{language} and framework %{framework}
    invalid_config_file_no_framework: cannot find configuration file in "%{hiptest_publisher_path}/lib/config" for language %{language}
    invalid_node: Invalid node_name %{name} in language group [%{group_name}]
    no_matching_test_run: |
      No matching test run found. Available test runs for this project are:
      %{test_runs}
    no_test_runs: 'No matching test run found: this project does not have any test runs.'
    project_not_found: No project found with this secret token.
    template_not_found: no template with name %{template_name} in dirs %{dirs}
    test_run_list_unavailable: Cannot get the list of available test runs from HipTest. Try using --test-run-id instead of --test-run-name
  exporting_file: Exporting %{name}
  fetching_data: Fetching data from HipTest
  caching_data: Caching data
  help:
    categories:
      title: For language %{language}, available file groups are
      usage_example: |2

        Usage examples:

        To export only %{first} files:
            hiptest-publisher --language=%{language} --only=%{first}

        To export both %{first} and %{second} files:
            hiptest-publisher --language=%{language} --only=%{first},%{second}
    description: |2

      Exports tests from HipTest for automation.

      Specific options:
    header: 'Usage: hiptest-publisher [options]'
    languages:
      no_framework_available: "  no framework option available %{language}"
      supported_languages: 'Supported languages:'
    options:
      nomalized_options: 'Options have been normalized. Values updated:'
  options:
    actionwords_diff: Show actionwords diff since last update (summary)
    actionwords_diff_json: Show actionwords diff since last update (JSON output)
    actionwords_only: "(deprecated) alias for --only=actionwords"
    actionwords_signature: Export actionwords signature
    aw_created: Output code for new action words
    aw_definition_changed: Output action words for which definition changed
    aw_deleted: Output signature of deleted action words
    aw_renamed: Output signatures of renamed action words
    aw_signature_changed: Output signatures of action words for which signature changed
    check_version: Check if a new release of hiptest-publisher is available
    config: Configuration file
    empty_folders: Export empty folders
    execution_environment: Name of the execution environment
    filename_pattern: Filename pattern (containing %s)
    filter_on_folder_ids: Filter on folder ids (use commas to separate ids when fetching multiple folders)
    filter_on_folder_name: Filter on folder name (only one name is accepted)
    filter_on_scenario_ids: Filter on scenario ids (use commas to separate ids when fetching multiple scenarios)
    filter_on_scenario_name: Filter on scenario name (only one name is accepted)
    filter_on_status: Filter on test status in last build (use in conjunction with a test run)
    filter_on_tags: Filter on scenarios and folder tags (use commas to separate tags when using multiple tags)
    force_overwrite: Force overwrite of existing files (do not apply to test files)
    framework: Test framework to use
    global_failure_on_missing_reports: When there is no results file to push, report a global failure
    help: Show this message
    http_proxy: 'Specify your http proxy to access Hiptest'
    keep_filenames: 'Keep the same name as in HipTest for the test files (note: may cause encoding issues)'
    keep_foldernames: 'Keep the same name as in HipTest for the folders (note: may cause encoding issues)'
    language: Target language
    languages_help: Show languages and framework options
    leafless_export: Use only last level action word
    library_name: 'Use in conjunction with show-actionwords-*: show the diff for the specified library'
    meta: Meta informations that can be used for customizing templates
    not_recursive: 'Used in conjunction with filter-on-folder-ids or filter-on-folder-name: only exports those folders, not their children'
    only: Restrict export to given file categories (--only=list to list them)
    output_directory: Output directory
    overriden_templates: Folder for overriden templates
    parameter_delimiter: Parameter delimiter (for Gherkin based export only)
    parent_folder_tags: 'Export tags from parent folders (note: if set to false, those tags are never rendered. Only available for Gherkin base exports)'
    push: Push a results file to the server
    push_format: Format of the test results (cucumber-json, junit, nunit, robot, tap)
    site: Site to fetch from
    sort: 'Sorting of tests in output: id will sort them by age, order will keep the same order than in hiptest (only with --with-folders option, will fallback to id otherwise), alpha will sort them by name'
    split_scenarios: Export each scenario in a single file (except for Gherkin based languages)
    test_run_id: Export data from a test run identified by its id
    test_run_name: Export data from a test run identified by its name
    tests_only: "(deprecated) alias for --only=tests"
    token: Secret token (available in your project settings)
    uids: 'Export UIDs (note: can be disabled only for Gherkin-based exports, may cause issue when pushing results back)'
    verbose: Run verbosely
    with_dataset_names: 'Export dataset name when creating feature files (note: available only for Gherkin-based exports)'
    with_folders: Use folders hierarchy to export files in respective directories
    without: Exclude file categories from import (--only=list to list them)
    xml_file: XML file to use instead of fetching it from HipTest
    xml_cache_dir: "Path to the directory to store cache of Hiptest XML outputs"
    xml_cache_validity: "Validity of the XML file cache in seconds"
  overwrite:
    ask_confirmation: 'File %{path} exists, do you want to overwrite it? [y/N] '
    warning_message: File %{path} already exists, skipping. Use --force to overwrite it.
  push:
    empty_results: |
      Possible causes for the lack of imported tests:

        * Did you run the following command before executing your tests?
          %{enhanced_command}

        * Did you specify the correct push format?
          Use push_format=<format> in your config file or option --push-format=<format> in the command line
          Available formats are: cucumber-json, junit, nunit, robot, tap
    posting_results: Posting %{file} to %{site}
    test_imported: "  Test '%{name}' imported"
    test_run_id: the ID of the test run you want to push the results to
    tests_imported_summary:
      one: One test imported
      other: "%{count} tests imported"
      zero: No tests imported
  readable_list: "%{first_items} and %{last_item}"
  request_sent: 'Request sent to: %{uri}'
  ruby_version:
    current_version: You are using %{engine} %{version}.
    deprecation_warning: Ruby %{version} support is deprecated and will be removed in later version of hiptest-publisher
    required_version: hiptest-publisher requires Ruby version >= %{version}.
    support_ended: Official support for Ruby %{version} ended on %{year}-%{month}-%{day}
    use_more_recent: Please use a more recent ruby release to run hiptest-publisher.
  verbose_header: 'Running hiptest-publisher %{version} with:'
